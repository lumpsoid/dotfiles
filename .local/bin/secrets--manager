#!/usr/bin/env bash

# Fail on undefined variables and propagate pipeline errors
set -uo pipefail

SECRETS_BASE="$HOME/.secrets"
SECRETS_ENCRYPTED="$HOME/.secrets.gpg"
SECRETS_GPG_KEY="${SECRETS_GPG_KEY:-78E5D01A4A211DC1}"
LOCK_FILE="/tmp/secrets_unlocked_$(whoami)"
LOG_FILE="/tmp/secrets_manager_$(whoami).log"

# Create base directory if it doesn't exist
mkdir -p "$SECRETS_BASE" 2>/dev/null || {
    echo "ERROR: Unable to create secrets directory at $SECRETS_BASE" >&2
    exit 1
}
chmod 700 "$SECRETS_BASE" 2>/dev/null || {
    echo "ERROR: Unable to set permissions on secrets directory" >&2
    exit 1
}

log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" | tee -a "$LOG_FILE" 2>/dev/null
}

# Safely handle temporary files
cleanup_temp() {
    local temp_files=("$@")
    for file in "${temp_files[@]}"; do
        if [[ -e "$file" ]]; then
            rm -rf "$file" 2>/dev/null
        fi
    done
}

# Function to validate GPG key exists
validate_gpg_key() {
    # Check if SECRETS_GPG_KEY is empty
    if [[ -z "${SECRETS_GPG_KEY:-}" ]]; then
        log "ERROR: GPG key ID is empty. Please set SECRETS_GPG_KEY variable."
        return 1
    fi
    
    if ! gpg --list-keys "$SECRETS_GPG_KEY" &>/dev/null; then
        log "ERROR: GPG key $SECRETS_GPG_KEY not found. Please check your key."
        return 1
    fi
    return 0
}

# Function to encrypt all secrets
encrypt_secrets() {
    log "Encrypting secrets..."
    
    # Check if secrets directory exists and has content
    if [ ! -d "$SECRETS_BASE" ] || [ -z "$(ls -A "$SECRETS_BASE" 2>/dev/null)" ]; then
        log "No secrets to encrypt or directory doesn't exist."
        rm -f "$LOCK_FILE" 2>/dev/null
        return 0
    fi
    
    # Validate GPG key first
    if ! validate_gpg_key; then
        log "Encryption aborted due to GPG key issues."
        return 1
    fi
    
    # Create a temporary file for encryption
    local temp_encrypted
    temp_encrypted=$(mktemp) || {
        log "ERROR: Failed to create temporary file for encryption"
        return 1
    }
    
    # Encrypt to temporary file first - with error handling
    if ! tar -czf - -C "$(dirname "$SECRETS_BASE")" "$(basename "$SECRETS_BASE")" 2>>$LOG_FILE | \
         gpg --batch --yes --encrypt --recipient "$SECRETS_GPG_KEY" > "$temp_encrypted" 2>>$LOG_FILE; then
        log "ERROR: Encryption process failed"
        cleanup_temp "$temp_encrypted"
        return 1
    fi
    
    if [ -s "$temp_encrypted" ]; then
        # Backup existing encrypted file if it exists
        if [ -f "$SECRETS_ENCRYPTED" ]; then
            local backup_file="${SECRETS_ENCRYPTED}.backup"
            if ! cp "$SECRETS_ENCRYPTED" "$backup_file" 2>/dev/null; then
                log "WARNING: Failed to create backup of existing encrypted secrets"
            else
                log "Backup created at $backup_file"
            fi
        fi
        
        # Move to final location only if successful
        if ! mv "$temp_encrypted" "$SECRETS_ENCRYPTED" 2>/dev/null; then
            log "ERROR: Failed to move encrypted file to final location"
            cleanup_temp "$temp_encrypted"
            return 1
        fi
        
        log "Secrets encrypted successfully."
        
        # Clean up secrets directory - safely
        rm -rf "${SECRETS_BASE:?}/" 2>/dev/null
        
        rm -f "$LOCK_FILE" 2>/dev/null
        return 0
    else
        log "ERROR: Encrypted file is empty. Encryption probably failed."
        cleanup_temp "$temp_encrypted"
        return 1
    fi
}

# Function to decrypt secrets
decrypt_secrets() {
    log "Decrypting secrets..."
    
    # Always ensure the base directory exists and is empty
    if [ -d "$SECRETS_BASE" ]; then
        if ! rm -rf "${SECRETS_BASE:?}/"* 2>/dev/null; then
            log "ERROR: Failed to clean secrets directory"
            return 1
        fi
    else
        if ! mkdir -p "$SECRETS_BASE" 2>/dev/null; then
            log "ERROR: Failed to create secrets directory"
            return 1
        fi
    fi
    
    if ! chmod 700 "$SECRETS_BASE" 2>/dev/null; then
        log "ERROR: Failed to set permissions on secrets directory"
        return 1
    fi
    
    if [ ! -f "$SECRETS_ENCRYPTED" ] || [ ! -s "$SECRETS_ENCRYPTED" ]; then
        log "No encrypted secrets found or file is empty. Starting with empty secrets structure."
        touch "$LOCK_FILE" 2>/dev/null || log "WARNING: Could not create lock file"
        return 0
    fi
    
    # Create a temporary directory for decryption
    local temp_dir
    temp_dir=$(mktemp -d) || {
        log "ERROR: Failed to create temporary directory for decryption"
        return 1
    }
    
    # Try to decrypt
    if ! gpg --batch --quiet --decrypt "$SECRETS_ENCRYPTED" 2>>$LOG_FILE | tar -xzf - -C "$temp_dir" 2>>$LOG_FILE; then
        log "ERROR: Failed to decrypt secrets. GPG command failed."
        cleanup_temp "$temp_dir"
        return 1
    fi
    
    if [ -d "$temp_dir/.secrets" ]; then
        # Copy contents from temp dir to actual secrets directory
        if ! cp -a "$temp_dir/.secrets/." "$SECRETS_BASE/" 2>/dev/null; then
            log "ERROR: Failed to copy decrypted secrets to target directory"
            cleanup_temp "$temp_dir"
            return 1
        fi
        log "Secrets decrypted successfully."
        touch "$LOCK_FILE" 2>/dev/null || log "WARNING: Could not create lock file"
        cleanup_temp "$temp_dir"
        return 0
    else
        log "ERROR: Decryption failed. Could not find secrets in decrypted data."
        cleanup_temp "$temp_dir"
        return 1
    fi
}

# Function to add a secret value for a project
add_secret() {
    local project="$1"
    local secret_name="$2"
    local secret_value="$3"
    
    # Validate inputs
    if [[ -z "$project" || -z "$secret_name" ]]; then
        echo "ERROR: Project and secret name cannot be empty" >&2
        return 1
    fi
    
    # Sanitize inputs to prevent directory traversal
    if [[ "$project" = */* || "$secret_name" = */* ]]; then
        echo "ERROR: Project and secret names cannot contain path separators" >&2
        return 1
    fi
    
    local project_dir="$SECRETS_BASE/$project"
    if ! mkdir -p "$project_dir" 2>/dev/null; then
        echo "ERROR: Failed to create project directory for '$project'" >&2
        return 1
    fi
    
    if ! chmod 700 "$project_dir" 2>/dev/null; then
        echo "ERROR: Failed to set permissions on project directory" >&2
        return 1
    fi
    
    if ! echo "$secret_value" > "$project_dir/$secret_name" 2>/dev/null; then
        echo "ERROR: Failed to write secret value to file" >&2
        return 1
    fi
    
    if ! chmod 600 "$project_dir/$secret_name" 2>/dev/null; then
        echo "ERROR: Failed to set permissions on secret file" >&2
        rm -f "$project_dir/$secret_name" 2>/dev/null
        return 1
    fi
    
    echo "Secret '$secret_name' created for project '$project'"
    return 0
}

# Function to absorb a file's content as a secret
absorb_file_secret() {
    local project="$1"
    local secret_name="$2"
    local file_path="$3"
    
    # Validate inputs
    if [[ -z "$project" || -z "$secret_name" || -z "$file_path" ]]; then
        echo "ERROR: Project, secret name, and file path cannot be empty" >&2
        return 1
    fi
    
    # Sanitize inputs to prevent directory traversal
    if [[ "$project" = */* || "$secret_name" = */* ]]; then
        echo "ERROR: Project and secret names cannot contain path separators" >&2
        return 1
    fi
    
    if [ ! -f "$file_path" ]; then
        echo "ERROR: File '$file_path' not found" >&2
        return 1
    fi
    
    if [ ! -r "$file_path" ]; then
        echo "ERROR: Cannot read file '$file_path'" >&2
        return 1
    fi
    
    local project_dir="$SECRETS_BASE/$project"
    if ! mkdir -p "$project_dir" 2>/dev/null; then
        echo "ERROR: Failed to create project directory for '$project'" >&2
        return 1
    fi
    
    if ! chmod 700 "$project_dir" 2>/dev/null; then
        echo "ERROR: Failed to set permissions on project directory" >&2
        return 1
    fi
    
    if ! cp "$file_path" "$project_dir/$secret_name" 2>/dev/null; then
        echo "ERROR: Failed to copy file to secrets directory" >&2
        return 1
    fi
    
    if ! chmod 600 "$project_dir/$secret_name" 2>/dev/null; then
        echo "ERROR: Failed to set permissions on secret file" >&2
        rm -f "$project_dir/$secret_name" 2>/dev/null
        return 1
    fi
    
    echo "Secret '$secret_name' absorbed for project '$project' from file '$file_path'"
    return 0
}

# Function to create a symlink to a secret
link_secret() {
    local project="$1"
    local secret_name="$2"
    local target_path="$3"
    
    # Validate inputs
    if [[ -z "$project" || -z "$secret_name" || -z "$target_path" ]]; then
        echo "ERROR: Project, secret name, and target path cannot be empty" >&2
        return 1
    fi
    
    # Sanitize inputs to prevent directory traversal
    if [[ "$project" = */* || "$secret_name" = */* ]]; then
        echo "ERROR: Project and secret names cannot contain path separators" >&2
        return 1
    fi
    
    local secret_path="$SECRETS_BASE/$project/$secret_name"
    
    if [ ! -f "$secret_path" ]; then
        echo "ERROR: Secret '$secret_name' not found for project '$project'" >&2
        return 1
    fi
    
    # Create target directory if it doesn't exist
    local target_dir
    target_dir=$(dirname "$target_path")
    if ! mkdir -p "$target_dir" 2>/dev/null; then
        echo "ERROR: Failed to create target directory at '$target_dir'" >&2
        return 1
    fi
    
    # If target exists and is not a symlink, backup and warn
    if [ -e "$target_path" ] && [ ! -L "$target_path" ]; then
        local backup_path="${target_path}.backup.$(date +%Y%m%d%H%M%S)"
        if ! mv "$target_path" "$backup_path" 2>/dev/null; then
            echo "ERROR: Target exists and cannot be backed up. Aborting link creation." >&2
            return 1
        fi
        echo "WARNING: Backed up existing file to '$backup_path'" >&2
    fi
    
    if ! ln -sf "$secret_path" "$target_path" 2>/dev/null; then
        echo "ERROR: Failed to create symlink" >&2
        return 1
    fi
    
    echo "Linked secret '$secret_name' to '$target_path'"
    return 0
}

# Check if secrets are unlocked
are_secrets_unlocked() {
    [ -f "$LOCK_FILE" ]
}

# Function to get all secrets status
status() {
    if are_secrets_unlocked; then
        echo "Secrets status: UNLOCKED"
        echo "Projects with secrets:"
        
        # Check if any projects exist
        local project_count=0
        for dir in "$SECRETS_BASE"/*/; do
            if [ -d "$dir" ]; then
                ((project_count++))
                break
            fi
        done
        
        if [ "$project_count" -eq 0 ]; then
            echo "  No projects with secrets found."
        else
            for dir in "$SECRETS_BASE"/*/; do
                if [ -d "$dir" ]; then
                    project=$(basename "$dir")
                    secret_count=$(find "$dir" -type f 2>/dev/null | wc -l)
                    echo "  - $project ($secret_count secrets)"
                fi
            done
        fi
    else
        echo "Secrets status: LOCKED"
        if [ -f "$SECRETS_ENCRYPTED" ]; then
            local file_size
            file_size=$(du -h "$SECRETS_ENCRYPTED" 2>/dev/null | cut -f1)
            if [ -n "$file_size" ]; then
                echo "Encrypted secrets file exists: $SECRETS_ENCRYPTED (Size: $file_size)"
            else
                echo "Encrypted secrets file exists: $SECRETS_ENCRYPTED"
            fi
        else
            echo "No encrypted secrets found."
        fi
    fi
}

# Perform sanity checks
sanity_check() {
    # Check if gpg is installed
    if ! command -v gpg &>/dev/null; then
        echo "ERROR: GPG not found. Please install GnuPG." >&2
        exit 1
    fi
    
    # Check if HOME is set
    if [ -z "${HOME:-}" ]; then
        echo "ERROR: HOME environment variable not set" >&2
        exit 1
    fi
}

# Run sanity checks
sanity_check

# Main command processing
case "${1:-}" in
    unlock)
        if are_secrets_unlocked; then
            echo "Secrets are unlocked. Please lock first: $0 unlock" >&2
            exit 1
        fi
        decrypt_secrets
        exit $?
        ;;
    lock)
        if ! are_secrets_unlocked; then
            echo "Secrets are locked. Please unlock first: $0 unlock" >&2
            exit 1
        fi
        encrypt_secrets
        exit $?
        ;;
    add)
        if [[ $# -lt 4 ]]; then
            echo "Usage: $0 add PROJECT SECRET_NAME SECRET_VALUE" >&2
            exit 1
        fi
        if ! are_secrets_unlocked; then
            echo "Secrets are locked. Please unlock first: $0 unlock" >&2
            exit 1
        fi
        add_secret "$2" "$3" "$4"
        exit $?
        ;;
    absorb)
        if [[ $# -lt 4 ]]; then
            echo "Usage: $0 absorb PROJECT SECRET_NAME FILE_PATH" >&2
            exit 1
        fi
        if ! are_secrets_unlocked; then
            echo "Secrets are locked. Please unlock first: $0 unlock" >&2
            exit 1
        fi
        absorb_file_secret "$2" "$3" "$4"
        exit $?
        ;;
    link)
        if [[ $# -lt 4 ]]; then
            echo "Usage: $0 link PROJECT SECRET_NAME TARGET_PATH" >&2
            exit 1
        fi
        if ! are_secrets_unlocked; then
            echo "Secrets are locked. Please unlock first: $0 unlock" >&2
            exit 1
        fi
        link_secret "$2" "$3" "$4"
        exit $?
        ;;
    status)
        status
        exit 0
        ;;
    *)
        echo "Usage: $0 {unlock|lock|add|link|absorb|status} [arguments]" >&2
        echo "  unlock                                  - Decrypt and set up secrets" >&2
        echo "  lock                                    - Encrypt and wipe decrypted secrets" >&2
        echo "  add    PROJECT SECRET_NAME SECRET_VALUE - Create a new secret" >&2
        echo "  link   PROJECT SECRET_NAME TARGET_PATH  - Create symlink to secret" >&2
        echo "  absorb PROJECT SECRET_NAME FILE_PATH    - Absorb file contents as secret" >&2
        echo "  status                                  - Show current secrets status" >&2
        exit 1
        ;;
esac
